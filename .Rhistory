which(1:500%%3==0)
length(which(1:500%%3==0))
x=length(which(1:500%%3==0))
x<-sort(x)
x
x=sort(which(1:500%%3==0))
x
x[88]
x[88:90]
for(i in 1:166) {car(x[i]," ",x[167-i],"\n")}
for(i in 1:166) {cat(x[i]," ",x[167-i],"\n")}
install.packages("L:/BRKGA.rar", repos = NULL)
install.packages("L:/Trabs/BRKGA_0.1.0.zip", repos = NULL, type = "win.binary")
install.packages("L:/Trabs/BRKGA_0.1.0.zip", repos = NULL, type = "win.binary")
install.packages("L:/Trabs/BRKGA_0.1.0.zip", repos = NULL, type = "win.binary")
install.packages("L:/Trabs/BRKGA_0.1.0.zip", repos = NULL, type = "win.binary")
library(BRKGA)
data(Data_MDP1)
D<-Data_MDP1
N<-dim(D)[1]
M<-10
RDi<-apply(as.matrix(1:N),1,function(i) sum(D[i,]))/sum((D[upper.tri(D)]))
u<-popgen(n=N,1)
OD<-list(M=M,RDi=RDi)
Xm<-Decoder_MDP(u,OD)
Xm
data(Data_MDP1)
D<-Data_MDP1
N<-dim(D)[1]
M<-10
RDi<-apply(as.matrix(1:N),1,function(i) sum(D[i,]))/sum((D[upper.tri(D)]))
u<-popgen(n=N,1)
OD<-list(M=M,RDi=RDi)
Xm<-Decoder_MDP(u,OD)
Xm
N<-nrow(iris)
u<-popgen(n=N,p=1)
k<-3
medoids<-Decoder_MEDOID(u,k)
N
medoids
498-252
246/3
install.packages("GA")
install.packages("L:/Trabs/BRKGA_0.1.0.zip", repos = NULL, type = "win.binary")
install.packages("L:/Trabs/BRKGA_0.1.0.zip", repos = NULL, type = "win.binary")
install.packages("ompr")
install.packages("ROI")
install.packages("ompr.roi")
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
result <- MIPModel() %>%
add_variable(x, type = "integer") %>%
add_variable(y, type = "continuous", lb = 0) %>%
set_bounds(x, lb = 0) %>%
set_objective(x + y, "max") %>%
add_constraint(x + y <= 11.25) %>%
solve_model(with_ROI(solver = "glpk"))
get_solution(result, x)
get_solution(result, y)
result <- MIPModel() %>%
add_variable(x, type = "integer") %>%
add_variable(y, type = "continuous", lb = 0) %>%
set_bounds(x, lb = 0) %>%
set_objective(x + y, "max") %>%
add_constraint(x + y <= 11.25) %>%
solve_model(with_ROI(solver = "glpk"))
library(dplyr)
library(dplyr)
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
max_capacity <- 5
n <- 10
weights <- runif(n, max = max_capacity)
MIPModel() %>%
add_variable(x[i], i = 1:n, type = "binary") %>%
set_objective(sum_expr(weights[i] * x[i], i = 1:n), "max") %>%
add_constraint(sum_expr(weights[i] * x[i], i = 1:n) <= max_capacity) %>%
solve_model(with_ROI(solver = "glpk")) %>%
get_solution(x[i]) %>%
filter(value > 0)
result <- MIPModel() %>%
add_variable(x, type = "integer") %>%
add_variable(y, type = "continuous", lb = 0) %>%
set_bounds(x, lb = 0) %>%
set_objective(x + y, "max") %>%
add_constraint(x + y <= 11.25) %>%
solve_model(with_ROI(solver = "glpk"))
get_solution(result, x)
get_solution(result, y)
result <- MIPModel() %>%
add_variable(x, type = "integer") %>%
add_variable(y, type = "continuous", lb = 0) %>%
set_bounds(x, lb = 0) %>%
set_objective(x + y, "max") %>%
add_constraint(x + y <= 11.25) %>%
solve_model(with_ROI(solver = "Rsymphony"))
get_solution(result, x)
get_solution(result, y)
result <- MIPModel() %>%
add_variable(x, type = "integer") %>%
add_variable(y, type = "continuous", lb = 0) %>%
set_bounds(x, lb = 0) %>%
set_objective(x + y, "max") %>%
add_constraint(x + y <= 11.25) %>%
solve_model(with_ROI(solver = "Rglpk"))
get_solution(result, x)
get_solution(result, y)
library(dplyr)
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
max_capacity <- 5
n <- 10
weights <- runif(n, max = max_capacity)
MIPModel() %>%
add_variable(x[i], i = 1:n, type = "binary") %>%
set_objective(sum_expr(weights[i] * x[i], i = 1:n), "max") %>%
add_constraint(sum_expr(weights[i] * x[i], i = 1:n) <= max_capacity) %>%
solve_model(with_ROI(solver = "glpk")) %>%
get_solution(x[i]) %>%
]
library(ROI.plugin.glpk)
installed.packages("ROI.plugin.glpk")
install.packages("ROI.plugin.symphony")
result <- MIPModel() %>%
add_variable(x, type = "integer") %>%
add_variable(y, type = "continuous", lb = 0) %>%
set_bounds(x, lb = 0) %>%
set_objective(x + y, "max") %>%
add_constraint(x + y <= 11.25) %>%
solve_model(with_ROI(solver = "Rsymphony"))
get_solution(result, x)
get_solution(result, y)
library(ROI.plugin.symphony)
result <- MIPModel() %>%
add_variable(x, type = "integer") %>%
add_variable(y, type = "continuous", lb = 0) %>%
set_bounds(x, lb = 0) %>%
set_objective(x + y, "max") %>%
add_constraint(x + y <= 11.25) %>%
solve_model(with_ROI(solver = "Rsymphony"))
get_solution(result, x)
get_solution(result, y)
install.packages("ROI.plugin.symphony")
library(dplyr)
library(ROI)
library(ROI.plugin.symphony)
library(ompr)
library(ompr.roi)
result <- MIPModel() %>%
add_variable(x, type = "integer") %>%
add_variable(y, type = "continuous", lb = 0) %>%
set_bounds(x, lb = 0) %>%
set_objective(x + y, "max") %>%
add_constraint(x + y <= 11.25) %>%
solve_model(with_ROI(solver = "symphony"))
get_solution(result, x)
get_solution(result, y)
result <- MIPModel() %>%
add_variable(x, type = "integer") %>%
add_variable(y, type = "continuous", lb = 0) %>%
set_bounds(x, lb = 0) %>%
set_objective(x + y, "max") %>%
add_constraint(x + y <= 11.25) %>%
solve_model(with_ROI(solver = "symphony"))
install.packages("ROI.plugin.glpk")
library(dplyr)
library(ROI)
library(ROI.plugin.symphony)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
result <- MIPModel() %>%
add_variable(x, type = "integer") %>%
add_variable(y, type = "continuous", lb = 0) %>%
set_bounds(x, lb = 0) %>%
set_objective(x + y, "max") %>%
add_constraint(x + y <= 11.25) %>%
solve_model(with_ROI(solver = "glpk"))
get_solution(result, x)
get_solution(result, y)
max_capacity <- 5
n <- 10
weights <- runif(n, max = max_capacity)
MIPModel() %>%
add_variable(x[i], i = 1:n, type = "binary") %>%
set_objective(sum_expr(weights[i] * x[i], i = 1:n), "max") %>%
add_constraint(sum_expr(weights[i] * x[i], i = 1:n) <= max_capacity) %>%
solve_model(with_ROI(solver = "glpk")) %>%
get_solution(x[i]) %>%
filter(value > 0)
install.packages("L:/Trabs/BRKGA_0.1.0.zip", repos = NULL, type = "win.binary")
install.packages("rcmdcheck")
install.packages("testthat")
install.packages("F:/Trabs/BRKGA.rar", repos = NULL)
install.packages("F:/Trabs/BRKGA.rar", repos = NULL, lib="C:/Program Files/R/R-3.6.3/library")
devtools::install_github("jambrito/BRKGA")
install.packages("roxygen2", lib="C:/Program Files/R/R-3.6.3/library")
install.packages("testthat", INSTALL_opts = "--install-tests")
install.packages("F:/Trabs/BRKGA.rar", repos = NULL, lib="C:/Program Files/R/R-3.6.3/library")
install.packages("F:/Trabs/BRKGA_0.1.0.zip", repos = NULL, type = "win.binary", lib="C:/Program Files/R/R-3.6.3/library")
getwd()
library(BRKGA)
install.packages("F:/Trabs/BRKGA_0.1.0.zip", repos = NULL, type = "win.binary")
ls()
D<-as.matrix(dist(runif(29)))
#######################################FUNÇÔES BRKGA########################################################
Decoder_PMED<-function(u,p)
{
x<-order(u)
x<-x[1:p]
return(x)
}
Fobj_PMED<-function(D,x)
{
VF<-0
for (i in 1:nrow(D)) {VF<-VF+min(D[x,i])}
return(VF)
}
library(BRKGA)
remove.packages("BRKGA")
install.packages("F:/Trabs/BRKGA_0.1.0.zip", repos = NULL, type = "win.binary")
Decoder_PMED<-function(u,p)
{
x<-order(u)
x<-x[1:p]
return(x)
}
Fobj_PMED<-function(D,x)
{
VF<-0
for (i in 1:nrow(D)) {VF<-VF+min(D[x,i])}
return(VF)
}
library(BRKGA)
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=50,ng=100,ngw=500,MAX = FALSE,Exa1=1)
brkga<-function(Data,Fo,Dc,rc=0.7,pe=0.2,pm=0.2,n,p=100,ng=2000,ngw=500,MaxTime=3600,MAX=FALSE,Exa1=NULL,Exa2=NULL)
{
cpu_time<-proc.time()
time_iter<-0
f<-popgen(n,p)
if(is.null(Exa1)==TRUE)
{g<-t(apply(f,1,function(x) Dc(x)))}
else {g<-t(apply(f,1,function(x) Dc(x,Exa1)))}
if (nrow(g)==1) {g<-t(g)}
if(is.null(Exa2)==TRUE)
{ ft<-apply(g,1,function(x) Fo(Data,x))}
else {ft<-apply(g,1,function(x) Fo(Data,x,Exa2))}
fbest<-ifelse(MAX==TRUE,-Inf,Inf)
i<-0
pelite<-round(pe*p)
pmutant<-round(pm*p)
ngwb<-0
while((i<ng) & (ngwb<=ngw) & (time_iter<MaxTime))
{i<-i+1
ngwb<-ngwb+1
pq<-order(ft,decreasing = MAX)
f<-f[pq,] #Sorting by Fitness
g<-g[pq,]
fmin<-ft[pq[1]]
ft<-ft[pq]
if (MAX==FALSE)
{
if (fmin<fbest)
{fbest<-fmin
gbest<-g[1,]
solution_best<-c(fbest,gbest)
cat("Best Solution Generation ",i," = ",fbest,"\n")
flush.console()
ibest<-i
ngwb<-0
}
} else
{
if (fmin>fbest)
{fbest<-fmin
gbest<-g[1,]
solution_best<-c(fbest,gbest)
cat("Best Solution Generation ",i," = ",fbest,"\n")
flush.console()
ibest<-i
}
}
felite<-f[1:pelite,]
fnonelite<-f[(pelite+1):p,] #Non-Elite
fmutant<-popgen(n,pmutant)
fnovos<-crossover(felite,fnonelite,rc,p,pelite,pmutant,n)
fnew<-rbind(fmutant,fnovos)
if(is.null(Exa1)==TRUE)
{ gnew<-t(apply(fnew,1,function(x) Dc(x)))}
else {gnew<-t(apply(fnew,1,function(x) Dc(x,Exa1)))}
if (nrow(gnew)==1) {gnew<-t(gnew)}
g<-rbind(g[1:pelite,],gnew)
f<-rbind(felite,fnew)
glk<-g[(pelite+1):p,]
if (is.null(Exa2)==TRUE)
{ftk<-apply(glk,1,function(x) Fo(Data,x))}
else
{ftk<-apply(glk,1,function(x) Fo(Data,x,Exa2))}
ft<-c(ft[1:pelite],ftk)
time_iter<-(proc.time()-cpu_time)[3]
}
cpu_time<-(proc.time()-cpu_time)[3]
return(list(fbest=fbest,gbest=gbest,cpu_time=cpu_time))
}
Decoder_PMED<-function(u,p)
{
x<-order(u)
x<-x[1:p]
return(x)
}
Fobj_PMED<-function(D,x)
{
VF<-0
for (i in 1:nrow(D)) {VF<-VF+min(D[x,i])}
return(VF)
}
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=50,ng=100,ngw=500,MAX = FALSE,Exa1=1)
popgen<-function(n,p)
{
pop<-matrix(runif(n*p),nrow=p,ncol=n)
return(pop)
}
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=50,ng=100,ngw=500,MAX = FALSE,Exa1=1)
source('F:/Trabs/BRKGA/R/brkga.R')
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=50,ng=100,ngw=500,MAX = FALSE,Exa1=1)
source('F:/Trabs/BRKGA/R/brkga.R')
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=50,ng=100,ngw=500,MAX = FALSE,Exa1=1)
source('F:/Trabs/BRKGA/R/brkga.R')
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=50,ng=100,ngw=500,MAX = FALSE,Exa1=1)
S
g[1,]
S[1,]
source('F:/Trabs/BRKGA/R/brkga.R')
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=50,ng=100,ngw=500,MAX = FALSE,Exa1=1)
S
as.matrix(S)
source('F:/Trabs/BRKGA/R/brkga.R')
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=50,ng=100,ngw=500,MAX = FALSE,Exa1=1)
source('F:/Trabs/BRKGA/R/crossover.R')
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=50,ng=100,ngw=500,MAX = FALSE,Exa1=5)
S
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=50,ng=100,ngw=500,MAX = FALSE,Exa1=2)
S
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=50,ng=100,ngw=500,MAX = FALSE,Exa1=1)
source('F:/Trabs/BRKGA/R/brkga.R')
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=50,ng=100,ngw=500,MAX = FALSE,Exa1=1)
source('F:/Trabs/BRKGA/R/brkga.R')
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=50,ng=100,ngw=500,MAX = FALSE,Exa1=1)
S
source('F:/Trabs/BRKGA/R/brkga.R')
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=50,ng=100,ngw=500,MAX = FALSE,Exa1=1)
S
source('F:/Trabs/BRKGA/R/brkga.R')
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=50,ng=100,ngw=500,MAX = FALSE,Exa1=1)
S
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=50,ng=100,ngw=500,MAX = FALSE,Exa1=2)
S
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=50,ng=100,ngw=500,MAX = FALSE,Exa1=2)
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=100,ng=500,ngw=500,MAX = FALSE,Exa1=2)
S
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=100,ng=500,ngw=500,MAX = FALSE,Exa1=2)
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=100,ng=500,ngw=500,MAX = FALSE,Exa1=5)
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=100,ng=500,ngw=500,MAX = FALSE,Exa1=5)
D<-as.matrix(dist(runif(29)))
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=100,ng=500,ngw=500,MAX = FALSE,Exa1=1)
library(BRKGA)
remove.packages("BRKGA")
install.packages("F:/Trabs/BRKGA_0.1.0.zip", repos = NULL, type = "win.binary")
D<-as.matrix(dist(runif(29)))
Decoder_PMED<-function(u,p)
{
x<-order(u)
x<-x[1:p]
return(x)
}
Fobj_PMED<-function(D,x)
{
VF<-0
for (i in 1:nrow(D)) {VF<-VF+min(D[x,i])}
return(VF)
}
ls()
library(BRKGA)
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=500,ng=1000,ngw=500,MAX = FALSE,Exa1=1)
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.6,pe=0.2,pm=0.3,p=200,ng=1000,ngw=500,MAX = FALSE,Exa1=1)
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.6,pe=0.2,pm=0.3,p=200,ng=5000,ngw=500,MAX = FALSE,Exa1=1)
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.6,pe=0.2,pm=0.3,p=200,ng=500,ngw=500,MAX = FALSE,Exa1=1)
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.6,pe=0.2,pm=0.3,p=200,ng=500,ngw=500,MAX = FALSE,Exa1=2)
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.6,pe=0.2,pm=0.3,p=200,ng=500,ngw=100,MAX = FALSE,Exa1=2)
library(BRKGA)
ls()
install.packages("F:/Trabs/BRKGA_0.1.0.zip", repos = NULL, type = "win.binary")
D<-as.matrix(dist(runif(29)))
library(BRKGA)
Decoder_PMED<-function(u,p)
{
x<-order(u)
x<-x[1:p]
return(x)
}
Fobj_PMED<-function(D,x)
{
VF<-0
for (i in 1:nrow(D)) {VF<-VF+min(D[x,i])}
return(VF)
}
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=500,ng=1000,ngw=500,MAX = FALSE,Exa1=1)
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=500,ng=500,ngw=200,MAX = FALSE,Exa1=1)
S
S<-brkga(D,Fo=Fobj_PMED,Dc=Decoder_PMED,n=ncol(D),
rc =0.65,pe=0.2,pm=0.4,p=500,ng=500,ngw=200,MAX = FALSE,Exa1=5)
S
library(BRKGA)
remove.packages(BRKGA)
install.packages("F:/Trabs/BRKGA_0.1.0.zip", repos = NULL, type = "win.binary")
data(Data_MDP1)
D<-Data_MDP1
N<-dim(D)[1]
M<-10
RDi<-apply(as.matrix(1:N),1,function(i) sum(D[i,]))/sum((D[upper.tri(D)]))
Exa1<-list(M=M,RDi=RDi)
s<-brkga(Data=D,Fo=Fobj_MDP,Dc=Decoder_MDP,n=N,ng=10,p=50,MaxTime=2,Exa1=Exa1,MAX=TRUE)
library(BRKGA)
data(Data_MDP1)
D<-Data_MDP1
N<-dim(D)[1]
M<-10
RDi<-apply(as.matrix(1:N),1,function(i) sum(D[i,]))/sum((D[upper.tri(D)]))
Exa1<-list(M=M,RDi=RDi)
s<-brkga(Data=D,Fo=Fobj_MDP,Dc=Decoder_MDP,n=N,ng=10,p=50,MaxTime=2,Exa1=Exa1,MAX=TRUE)
s
ls()
rm(list=ls())
library(BRKGA)
install.packages("F:/Trabs/BRKGA_0.1.0.zip", repos = NULL, type = "win.binary")
library(BRKGA)
library(BRKGA)
citation("BRKGA")
install.packages("G:/Trabs/BRKGA_0.1.0.zip", repos = NULL, type = "win.binary")
library(BRKGA)
data(Data_capitals)
D<-as.matrix(dist(Data_capitals))
Ncities<-nrow(Data_capitals)
s<-brkga(Data=D,Fo=Fobj_TSP,Dc=Decoder_TSP,ng=20,n=Ncities,p=50)
data(Data_capitals)
D<-as.matrix(dist(Data_capitals))
Ncities<-nrow(Data_capitals)
s<-brkga(Data=D,Fo=Fobj_TSP,Dc=Decoder_TSP,ng=200,n=Ncities,p=50)
data(Data_capitals)
D<-as.matrix(dist(Data_capitals))
Ncities<-nrow(Data_capitals)
s<-brkga(Data=D,Fo=Fobj_TSP,Dc=Decoder_TSP,ng=2000,n=Ncities,p=50)
citation("BRKGA")
library(BRKGA)
